version: 2.1

setup: << pipeline.parameters.run-setup >>

orbs:
  path-filtering: circleci/path-filtering@0.1.7

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  run-setup:
    type: boolean
    default: false
  run-any:
    type: boolean
    default: false
  run-all:
    type: boolean
    default: false
  run-site:
    type: boolean
    default: false
  run-devicecredential:
    type: boolean
    default: false
  run-discovery:
    type: boolean
    default: false
  run-inventory:
    type: boolean
    default: false
  run-swim:
    type: boolean
    default: false
  run-pnp:
    type: boolean
    default: false

jobs:

  pre:
    parameters: 
      ansible_cisco_dnac_version:
        type: string
        default: "6.9.0"

    #machine: true
    docker:
      - image: python:3.8.10
    resource_class: sledzikowy/dnacenter-ansible-minikube

    # environment:
    #   CIRCLE_PROJECT_REPONAME: << pipeline.trigger_parameters.github_app.repo_name >>
    #   CIRCLE_PROJECT_BRANCHNAME: << pipeline.trigger_parameters.github_app.branch >>

    steps:
      - run:
          command: echo dummy
      # - run:
      #     name: Debug information for pre
      #     command: |
      #       set -x 
      #       echo "REPO_URL: $REPO_URL"
      #       echo "CIRCLE_PROJECT_REPONAME: $CIRCLE_PROJECT_REPONAME"
      #       echo "CIRCLE_PROJECT_BRANCHNAME: $CIRCLE_PROJECT_BRANCHNAME"

  build: 
    parameters: 
      ansible_cisco_dnac_version:
        type: string
        default: "6.9.0"

    #machine: true
    docker:
      - image: python:3.8.10
    resource_class: sledzikowy/dnacenter-ansible-minikube
    # environment:
    #   REPO_URL: << pipeline.trigger_parameters.github_app.repo_url >>
    #   CIRCLE_PROJECT_REPONAME: << pipeline.trigger_parameters.github_app.repo_name >>
    #   CIRCLE_PROJECT_BRANCHNAME: << pipeline.trigger_parameters.github_app.branch >>
    steps:
      # - run:
      #     name: Debug information
      #     command: |
      #       echo "REPO_URL: $REPO_URL"
      #       echo "CIRCLE_PROJECT_REPONAME: $CIRCLE_PROJECT_REPONAME"
      #       echo "CIRCLE_PROJECT_BRANCHNAME: $CIRCLE_PROJECT_BRANCHNAME"
      - restore_cache:
          keys:
            - collection-<< pipeline.git.revision >>
      - run:
          name: Skip if already build
          command: |
            if [ $(ls workspace/*tar.gz) ]; then
                ls -alh workspace
                circleci-agent step halt
            fi
      - run:
          name: Clone repo to workspace
          command: |
            git clone --depth=1 https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git .
            git fetch origin $CIRCLE_BRANCH:work
            git checkout work
      - restore_cache:
          keys:
            - pip-cache-{{ checksum "test-requirements.txt" }}
      - run:
          name: Activate Virtual Environment, Install ansible and Build collection tarball
          command: |
            # Install ansible, dnacentersdk
            pip install --upgrade pip
            pip install -r test-requirements.txt
            # Build collection and store resulting tarball in directory $HOME/.cache/v<< parameters.ansible_cisco_dnac_version >>/collection-tarballs
            ansible-galaxy collection build --force --output-path workspace/
      - save_cache:
          key: collection-<< pipeline.git.revision >>
          paths:
            - 'workspace'
      - save_cache:
          key: pip-cache-{{ checksum "test-requirements.txt" }}
          paths:
            - ~/.cache/pip

  addrole:
    parameters: 
      run-all:
        type: boolean
        default: true
    #machine: true
    docker:
      - image: python:3.8.10
    resource_class: sledzikowy/dnacenter-ansible-minikube

    steps:
      - run:
          name: Create Roles File header
          command: |
            mkdir -p roles-file
            echo "---" > roles-file/ccc_roles.yml
            echo "- hosts: dnac_servers" >> roles-file/ccc_roles.yml
            echo "  gather_facts: no" >> roles-file/ccc_roles.yml
            echo "  connection: local" >> roles-file/ccc_roles.yml
            echo "  " >> roles-file/ccc_roles.yml
            echo "  tasks:" >> roles-file/ccc_roles.yml
            echo "  " >> roles-file/ccc_roles.yml
            echo "  vars:" >> roles-file/ccc_roles.yml
            echo "    debug: false" >> roles-file/ccc_roles.yml
            echo "  " >> roles-file/ccc_roles.yml
            echo "  roles:" >> roles-file/ccc_roles.yml
      - when:
          condition: 
            or: [ << pipeline.parameters.run-site >>, << pipeline.parameters.run-all >>, << parameters.run-all >> ]
          steps:
            - run: 
                command: |
                  echo "    - ccc_site_management" >> roles-file/ccc_roles.yml

      - when:
          condition:
            or: [ << pipeline.parameters.run-devicecredential >>, << pipeline.parameters.run-all >>, << parameters.run-all >> ]
          steps:
            - run: 
                command: |
                  echo "    - ccc_device_credential_management" >> roles-file/ccc_roles.yml

      - when:
          condition:
            or: [ << pipeline.parameters.run-discovery >>, << pipeline.parameters.run-all >>, << parameters.run-all >> ]
          steps:
            - run: 
                command: |
                  echo "    - ccc_discovery_management" >> roles-file/ccc_roles.yml

      - when:
          condition:
            or: [ << pipeline.parameters.run-inventory >>, << pipeline.parameters.run-all >>, << parameters.run-all >> ]
          steps:
            - run: 
                command: |
                  echo "    - ccc_inventory_management" >> roles-file/ccc_roles.yml

      - when:
          condition:
            or: [ << pipeline.parameters.run-swim >>, << pipeline.parameters.run-all >>, << parameters.run-all >> ]
          steps:
            - run: 
                command: |
                  echo "    - ccc_swim_management" >> roles-file/ccc_roles.yml


      - when:
          condition:
            or: [ << pipeline.parameters.run-pnp >>, << pipeline.parameters.run-all >>, << parameters.run-all >> ]
          steps:
            - run: 
                command: |
                  echo "    - ccc_pnp_management" >> roles-file/ccc_roles.yml

      - persist_to_workspace:
          root: 'roles-file'
          paths:
            - 'ccc_roles.yml'
  sanity-tests:
    parameters: 
      ansible_cisco_dnac_version:
        type: string
        default: "6.9.0"

    #machine: true
    docker:
      - image: python:3.8.10
    resource_class: sledzikowy/dnacenter-ansible-minikube 

    # environment:
    #   REPO_URL: << pipeline.trigger_parameters.github_app.repo_url >>
    #   CIRCLE_PROJECT_REPONAME: << pipeline.trigger_parameters.github_app.repo_name >>
    #   CIRCLE_PROJECT_BRANCHNAME: << pipeline.trigger_parameters.github_app.branch >>

    steps:
      # - run:
      #     name: Debug information
      #     command: |
      #       echo "REPO_URL: $REPO_URL"
      #       echo "CIRCLE_PROJECT_REPONAME: $CIRCLE_PROJECT_REPONAME"
      #       echo "CIRCLE_PROJECT_BRANCHNAME: $CIRCLE_PROJECT_BRANCHNAME"

      - run:
          name: Clone repo to workspace
          command: |
            git clone --depth=1 https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git .
            git fetch origin $CIRCLE_BRANCH:work
            git checkout work
      - attach_workspace:
          at: roles-file

      - restore_cache:
          keys:
            - collection-<< pipeline.git.revision >>
      - restore_cache:
          keys:
            - pip-cache-{{ checksum "test-requirements.txt" }}
      - run:
          name: Activate Virtual Environment, Install ansible and Build collection tarball
          command: |
            # Install ansible, dnacentersdk
            pip install --upgrade pip
            pip install -r test-requirements.txt
            ansible --version
      - run:
          name: Install the collection tarball
          command: |
            python --version
            ansible --version  
            ansible-galaxy collection install --force workspace/*.tar.gz
      - run:
          name: Copy static files
          command: |
            mkdir -p group_vars
            cp roles-file/ccc_roles.yml ccc_roles.yml
            echo ${GROUP_VARS} | base64 -d > group_vars/dnac_servers.yml
            echo ${DNAC_HOSTS} | base64 -d > hosts
      - run:
          name: Run sanity tests
          command: |
            export ANSIBLE_PERSISTENT_CONNECT_TIMEOUT=1000
            export ANSIBLE_PERSISTENT_COMMAND_TIMEOUT=1000
            export ANSIBLE_ROLES_PATH=$PWD/tests/integration
            ansible-playbook -i hosts ccc_roles.yml

          no_output_timeout: 120m

  post_pnp_testing:
    #machine: true
    docker:
      - image: python:3.8.10
    resource_class: sledzikowy/dnacenter-ansible-minikube

    steps:
      - when:
          condition: << pipeline.parameters.run-pnp >>
          steps:
            - run: 
                command: |
                  python ${HOME}/static/pnp_script.py #TODO
  main-pr:
    parameters: 
      ansible_cisco_dnac_version:
        type: string
        default: "6.9.0"
    docker:
      - image: maniator/gh:v2.49.2
    resource_class: sledzikowy/dnacenter-ansible-minikube 
    steps:
      - run:
          name: Clone repo to workspace
          command: git clone --depth=1 -b $CIRCLE_BRANCH https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git .
      - run:
          gh repo set-default $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          gh pr create --base main --head $CIRCLE_BRANCH --title "Release v<< parameters.ansible_cisco_dnac_version >>" --body "Release v<< parameters.ansible_cisco_dnac_version >>"


  release-job:
    parameters: 
      ansible_cisco_dnac_version:
        type: string
        default: "6.9.0"
    docker:
      - image: python:3.8.10
    resource_class: sledzikowy/dnacenter-ansible-minikube 
    steps:
      - run:
          name: Clone repo to workspace
          command: |
            git clone --depth=1 https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git .
            git fetch origin $CIRCLE_BRANCH:work
            git checkout work
      - restore_cache:
          keys:
            - collection-<< pipeline.git.revision >>
      # - add_ssh_keys:
      #     fingerprints:
      #       - "KEY_FINGERPRINT"
      - run:
          echo create release
          #git tag -a v<< parameters.ansible_cisco_dnac_version >> -m "Ansible DNACCollection Version v<< parameters.ansible_cisco_dnac_version >>"
          #gh release create "v<< parameters.ansible_cisco_dnac_version >>" --title "DNAC Collection Version v<< parameters.ansible_cisco_dnac_version >>" --latest
          #ansible-galaxy collection publish workspace/*.tar.gz --api-key=$GALAXYKEY
workflows:
  building:
    when:
      or:
        - equal: [ run-tests, << pipeline.parameters.GHA_Meta >> ]
        - equal: [ true,  << pipeline.parameters.run-setup >> ]
    jobs:
      - pre

      - build:
          matrix:
            parameters:
              ansible_cisco_dnac_version:
                - "6.9.0"
          requires:
            - pre

      - path-filtering/filter:
          requires:
            - build
          base-revision: main
          config-path: .circleci/config.yml
          mapping: |
            .* run-setup false

            plugins/.* run-any true
            tests/integration/.* run-any true

            plugins/module_utils/.* run-all true

            plugins/modules/site_workflow_manager.py run-site true
            plugins/modules/device_credential_workflow_manager.py run-devicecredential true
            plugins/modules/discovery_workflow_manager.py run-discovery true
            plugins/modules/inventory_workflow_manager.py run-inventory true
            plugins/modules/swim_workflow_manager.py run-swim true
            plugins/modules/pnp_workflow_manager.py run-pnp true
            
            tests/integration/ccc_site_management/.* run-site true    
            tests/integration/ccc_device_credential_management/.* run-devicecredential true
            tests/integration/ccc_discovery_management/.* run-discovery true
            tests/integration/ccc_inventory_management/.* run-inventory true
            tests/integration/ccc_swim_management/.* run-swim true
            tests/integration/ccc_pnp_management/.* run-pnp true

  testing:
    when: << pipeline.parameters.run-any >>
    jobs:
      - addrole    
      - sanity-tests:
          requires: 
            - addrole
          context:
            - dnac-servers
          matrix:
            parameters:
              ansible_cisco_dnac_version:
                - "6.9.0"
      # - post_pnp_testing:
      #     requires:
      #       - sanity-tests

  release-candidate:
    when:
      or:
        - equal: [ run-release-prep, << pipeline.parameters.GHA_Meta >> ]
    jobs:
      - build:
          matrix:
            parameters:
              ansible_cisco_dnac_version:
                - "6.9.0"
      - addrole:
          matrix:
            parameters:
              run-all:
                - true   
      - sanity-tests:
          requires: 
            - addrole
            - build
          context:
            - dnac-servers
          matrix:
            parameters:
              ansible_cisco_dnac_version:
                - "6.9.0" 
      - hold:
          type: approval
          requires: 
            - sanity-tests
      
      - main-pr:
          context:
            - gh-token
          requires:
            - hold

  release:
    when:
      or:
        - equal: [ run-release, << pipeline.parameters.GHA_Meta >> ]
    jobs:   
      - build:
          matrix:
            parameters:
              ansible_cisco_dnac_version:
                - "6.9.0"
      - release-job:
          requires:
              - build
          context:
            - gh-token
            - galaxy-token
